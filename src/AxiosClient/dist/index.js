"use strict";
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiException = exports.EmailTemplateRequest = exports.PagedListResultOfEmailTemplate = exports.VotingTopicOptionRequest = exports.PagedListResultOfVotingTopicOption = exports.VotingTopicOption = exports.VotingTopicRequest = exports.PagedListResultOfVotingTopic = exports.VotingTopic = exports.VotingSessionRequest = exports.PagedListResultOfVotingSession = exports.VotingSession = exports.MeetingUnitRequest = exports.PagedListResultOfMeetingUnit = exports.MeetingUnit = exports.MeetingTypeRequest = exports.PagedListResultOfMeetingType = exports.MeetingRequest = exports.PagedListResultOfMeeting = exports.MeetingStatus = exports.MeetingType = exports.Meeting = exports.DocumentRequest = exports.PagedListResultOfDocument = exports.Document = exports.PersonUnitRequest = exports.PersonRequest = exports.AddressRequest = exports.PagedListResultOfPerson = exports.MeetingSettingsRequest = exports.EmailTemplate = exports.MeetingSettings = exports.UnitTypeRequest = exports.PagedListResultOfUnitType = exports.UnitGroupRequest = exports.PagedListResultOfUnitGroup = exports.UnitRangeRequest = exports.UnitRequest = exports.PagedListResultOfUnit = exports.OwnerTypeRequest = exports.PagedListResultOfOwnerType = exports.OwnerRequest = exports.SortDirection = exports.Sorting = exports.FilterOperator = exports.Filtering = exports.PagedListResultOfOwner = exports.OwnerType = exports.UnitGroup = exports.UnitType = exports.FloorType = exports.Unit = exports.PersonType = exports.Address = exports.Person = exports.AuditMetadata = exports.Owner = exports.ProblemDetails = exports.EmailTemplateClient = exports.VotingTopicOptionClient = exports.VotingTopicClient = exports.VotingSessionClient = exports.MeetingUnitClient = exports.MeetingTypeClient = exports.MeetingClient = exports.DocumentClient = exports.PersonUnitClient = exports.PersonClient = exports.MeetingSettingsClient = exports.UnitTypeClient = exports.UnitGroupClient = exports.UnitClient = exports.OwnerTypeClient = exports.OwnerClient = void 0;
const axios_1 = require("axios");
const moment = require("moment");
class OwnerClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a document
     */
    get(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/owners/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = Owner.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a document by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/owners/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a document by identifier.
     * @param id The id.
     */
    delete(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/owners/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets documents by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/owners?";
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfOwner.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a document.
     * @param dto The dto.
     */
    post(dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/owners";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.OwnerClient = OwnerClient;
class OwnerTypeClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a document
     */
    get(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/owner-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = OwnerType.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a document by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/owner-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a document by identifier.
     * @param id The id.
     */
    delete(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/owner-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets documents by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/owner-types?";
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfOwnerType.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a document.
     * @param dto The dto.
     */
    post(dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/owner-types";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.OwnerTypeClient = OwnerTypeClient;
class UnitClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a document
     */
    get(unitGroupId, id, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-groups/{unitGroupId}/units/{id}";
        if (unitGroupId === undefined || unitGroupId === null)
            throw new Error("The parameter 'unitGroupId' must be defined.");
        url_ = url_.replace("{unitGroupId}", encodeURIComponent("" + unitGroupId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = Unit.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a document by identifier.
     * @param id The id.
     * @param request The request.
     */
    put(unitGroupId, id, request, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-groups/{unitGroupId}/units/{id}";
        if (unitGroupId === undefined || unitGroupId === null)
            throw new Error("The parameter 'unitGroupId' must be defined.");
        url_ = url_.replace("{unitGroupId}", encodeURIComponent("" + unitGroupId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(request);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a document by identifier.
     * @param id The id.
     */
    delete(unitGroupId, id, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-groups/{unitGroupId}/units/{id}";
        if (unitGroupId === undefined || unitGroupId === null)
            throw new Error("The parameter 'unitGroupId' must be defined.");
        url_ = url_.replace("{unitGroupId}", encodeURIComponent("" + unitGroupId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets documents by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(unitGroupId, filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-groups/{unitGroupId}/units?";
        if (unitGroupId === undefined || unitGroupId === null)
            throw new Error("The parameter 'unitGroupId' must be defined.");
        url_ = url_.replace("{unitGroupId}", encodeURIComponent("" + unitGroupId));
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfUnit.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a document.
     * @param request The request.
     */
    post(unitGroupId, request, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-groups/{unitGroupId}/units";
        if (unitGroupId === undefined || unitGroupId === null)
            throw new Error("The parameter 'unitGroupId' must be defined.");
        url_ = url_.replace("{unitGroupId}", encodeURIComponent("" + unitGroupId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(request);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates many units by range.
     * @param request The request.
     */
    post2(unitGroupId, request, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-groups/{unitGroupId}/units/range";
        if (unitGroupId === undefined || unitGroupId === null)
            throw new Error("The parameter 'unitGroupId' must be defined.");
        url_ = url_.replace("{unitGroupId}", encodeURIComponent("" + unitGroupId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(request);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost2(_response);
        });
    }
    processPost2(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.UnitClient = UnitClient;
class UnitGroupClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a unit group.
     */
    get(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-groups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = UnitGroup.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a unit group by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-groups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a unit group by identifier.
     * @param id The id.
     */
    delete(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-groups/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets unit groups by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-groups?";
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfUnitGroup.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a unit group.
     * @param dto The dto.
     */
    post(dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-groups";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.UnitGroupClient = UnitGroupClient;
class UnitTypeClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a document
     */
    get(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = UnitType.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a document by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a document by identifier.
     * @param id The id.
     */
    delete(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets documents by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-types?";
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfUnitType.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a document.
     * @param dto The dto.
     */
    post(dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/unit-types";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.UnitTypeClient = UnitTypeClient;
class MeetingSettingsClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets the current meeting settings
     */
    get(cancelToken) {
        let url_ = this.baseUrl + "/v1/settings/meetings";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = MeetingSettings.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates the meeting settings
     */
    post(request, cancelToken) {
        let url_ = this.baseUrl + "/v1/settings/meetings";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(request);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.MeetingSettingsClient = MeetingSettingsClient;
class PersonClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a person.
     */
    get(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/people/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = Person.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a person by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/people/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a person by identifier.
     * @param id The id.
     */
    delete(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/people/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets people by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/people?";
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfPerson.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a person.
     * @param dto The dto.
     */
    post(dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/people";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.PersonClient = PersonClient;
class PersonUnitClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a unit by person
     */
    get(personId, id, cancelToken) {
        let url_ = this.baseUrl + "/v1/people/{personId}/units/{id}";
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = Unit.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a owner by identifier.
     * @param id The id.
     * @param request The request.
     */
    put(personId, id, request, cancelToken) {
        let url_ = this.baseUrl + "/v1/people/{personId}/units/{id}";
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(request);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a owner by identifier.
     * @param id The id.
     */
    delete(personId, id, cancelToken) {
        let url_ = this.baseUrl + "/v1/people/{personId}/units/{id}";
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets units by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(personId, filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/people/{personId}/units?";
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId));
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfUnit.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a owner.
     * @param request The request.
     */
    post(personId, request, cancelToken) {
        let url_ = this.baseUrl + "/v1/people/{personId}/units";
        if (personId === undefined || personId === null)
            throw new Error("The parameter 'personId' must be defined.");
        url_ = url_.replace("{personId}", encodeURIComponent("" + personId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(request);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.PersonUnitClient = PersonUnitClient;
class DocumentClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a document
     */
    get(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/documents/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = Document.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a document by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/documents/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a document by identifier.
     * @param id The id.
     */
    delete(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/documents/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets documents by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/documents?";
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfDocument.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a document.
     * @param dto The dto.
     */
    post(dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/documents";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.DocumentClient = DocumentClient;
class MeetingClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a meeting
     */
    get(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/meetings/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = Meeting.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a meeting by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/meetings/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a meeting by identifier.
     * @param id The id.
     */
    delete(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/meetings/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets mettings by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/meetings?";
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfMeeting.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a meeting.
     * @param dto The dto.
     */
    post(dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/meetings";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Invite.
     * @param id The id.
     */
    invite(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/meetings/{id}/invite";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processInvite(_response);
        });
    }
    processInvite(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 202) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.MeetingClient = MeetingClient;
class MeetingTypeClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a meeting type.
     */
    get(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/meeting-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = MeetingType.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a document by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/meeting-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a document by identifier.
     * @param id The id.
     */
    delete(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/meeting-types/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets documents by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/meeting-types?";
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfMeetingType.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a document.
     * @param dto The dto.
     */
    post(dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/meeting-types";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.MeetingTypeClient = MeetingTypeClient;
class MeetingUnitClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a document
     */
    get(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/meeting-units/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = MeetingUnit.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a document by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/meeting-units/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a document by identifier.
     * @param id The id.
     */
    delete(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/meeting-units/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets documents by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/meeting-units?";
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfMeetingUnit.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a document.
     * @param dto The dto.
     */
    post(dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/meeting-units";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.MeetingUnitClient = MeetingUnitClient;
class VotingSessionClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a document
     */
    get(meetingId, id, cancelToken) {
        let url_ = this.baseUrl + "/v1/meetings/{meetingId}/voting-sessions/{id}";
        if (meetingId === undefined || meetingId === null)
            throw new Error("The parameter 'meetingId' must be defined.");
        url_ = url_.replace("{meetingId}", encodeURIComponent("" + meetingId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = VotingSession.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a document by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(meetingId, id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/meetings/{meetingId}/voting-sessions/{id}";
        if (meetingId === undefined || meetingId === null)
            throw new Error("The parameter 'meetingId' must be defined.");
        url_ = url_.replace("{meetingId}", encodeURIComponent("" + meetingId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a document by identifier.
     * @param id The id.
     */
    delete(meetingId, id, cancelToken) {
        let url_ = this.baseUrl + "/v1/meetings/{meetingId}/voting-sessions/{id}";
        if (meetingId === undefined || meetingId === null)
            throw new Error("The parameter 'meetingId' must be defined.");
        url_ = url_.replace("{meetingId}", encodeURIComponent("" + meetingId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets documents by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(meetingId, filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/meetings/{meetingId}/voting-sessions?";
        if (meetingId === undefined || meetingId === null)
            throw new Error("The parameter 'meetingId' must be defined.");
        url_ = url_.replace("{meetingId}", encodeURIComponent("" + meetingId));
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfVotingSession.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a document.
     * @param dto The dto.
     */
    post(meetingId, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/meetings/{meetingId}/voting-sessions";
        if (meetingId === undefined || meetingId === null)
            throw new Error("The parameter 'meetingId' must be defined.");
        url_ = url_.replace("{meetingId}", encodeURIComponent("" + meetingId));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.VotingSessionClient = VotingSessionClient;
class VotingTopicClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a document
     */
    get(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/voting-topics/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = VotingTopic.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a document by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/voting-topics/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a document by identifier.
     * @param id The id.
     */
    delete(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/voting-topics/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets documents by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/voting-topics?";
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfVotingTopic.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a document.
     * @param dto The dto.
     */
    post(dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/voting-topics";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.VotingTopicClient = VotingTopicClient;
class VotingTopicOptionClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a document
     */
    get(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/voting-topic-options/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = VotingTopicOption.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a document by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/voting-topic-options/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a document by identifier.
     * @param id The id.
     */
    delete(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/voting-topic-options/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets documents by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/voting-topic-options?";
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfVotingTopicOption.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a document.
     * @param dto The dto.
     */
    post(dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/voting-topic-options";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.VotingTopicOptionClient = VotingTopicOptionClient;
class EmailTemplateClient {
    constructor(baseUrl, instance) {
        this.jsonParseReviver = undefined;
        this.instance = instance ? instance : axios_1.default.create();
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets a email template
     */
    get(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/emails/templates/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGet(_response);
        });
    }
    processGet(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = EmailTemplate.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Updates a email template by identifier.
     * @param id The id.
     * @param dto The dto.
     */
    put(id, dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/emails/templates/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPut(_response);
        });
    }
    processPut(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            let result204 = null;
            let resultData204 = _responseText;
            result204 = resultData204 !== undefined ? resultData204 : null;
            return result204;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Deletes a email template by identifier.
     * @param id The id.
     */
    delete(id, cancelToken) {
        let url_ = this.baseUrl + "/v1/emails/templates/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "DELETE",
            url: url_,
            headers: {},
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processDelete(_response);
        });
    }
    processDelete(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve(null);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Gets email templates by criteria.
     * @param filterBy The filter by.
     * @param orderBy The order by.
     * @param pageIndex (optional) The page index.
     * @param pageSize (optional) The page size.
     */
    getAll(filterBy, orderBy, pageIndex, pageSize, cancelToken) {
        let url_ = this.baseUrl + "/v1/emails/templates?";
        if (filterBy === undefined)
            throw new Error("The parameter 'filterBy' must be defined.");
        else if (filterBy !== null)
            filterBy && filterBy.forEach((item, index) => {
                url_ += "filterBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (orderBy === undefined)
            throw new Error("The parameter 'orderBy' must be defined.");
        else if (orderBy !== null)
            orderBy && orderBy.forEach((item, index) => {
                url_ += "orderBy=" + encodeURIComponent(item.toString()) + "&";
            });
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processGetAll(_response);
        });
    }
    processGetAll(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200 = null;
            let resultData200 = _responseText;
            result200 = PagedListResultOfEmailTemplate.fromJS(resultData200);
            return result200;
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
    /**
     * Creates a email template.
     * @param dto The dto.
     */
    post(dto, cancelToken) {
        let url_ = this.baseUrl + "/v1/emails/templates";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(dto);
        let options_ = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };
        return this.instance.request(options_).catch((_error) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            }
            else {
                throw _error;
            }
        }).then((_response) => {
            return this.processPost(_response);
        });
    }
    processPost(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201 = null;
            let resultData201 = _responseText;
            result201 = resultData201 !== undefined ? resultData201 : null;
            return result201;
        }
        else if (status === 400) {
            const _responseText = response.data;
            let result400 = null;
            let resultData400 = _responseText;
            result400 = resultData400 !== undefined ? resultData400 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
        }
        else if (status === 409) {
            const _responseText = response.data;
            let result409 = null;
            let resultData409 = _responseText;
            result409 = resultData409 !== undefined ? resultData409 : null;
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
        }
        else if (status === 404) {
            const _responseText = response.data;
            let result404 = null;
            let resultData404 = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
        }
        else if (status === 500) {
            const _responseText = response.data;
            return throwException("A server side error occurred.", status, _responseText, _headers);
        }
        else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve(null);
    }
}
exports.EmailTemplateClient = EmailTemplateClient;
class ProblemDetails {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            if (_data["extensions"]) {
                this.extensions = {};
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        this.extensions[key] = _data["extensions"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key];
            }
        }
        return data;
    }
}
exports.ProblemDetails = ProblemDetails;
class Owner {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.person = _data["person"] ? Person.fromJS(_data["person"]) : undefined;
            this.unit = _data["unit"] ? Unit.fromJS(_data["unit"]) : undefined;
            this.type = _data["type"] ? OwnerType.fromJS(_data["type"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Owner();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["person"] = this.person ? this.person.toJSON() : undefined;
        data["unit"] = this.unit ? this.unit.toJSON() : undefined;
        data["type"] = this.type ? this.type.toJSON() : undefined;
        return data;
    }
}
exports.Owner = Owner;
class AuditMetadata {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.createdById = _data["createdById"];
            this.createdOn = _data["createdOn"] ? moment.parseZone(_data["createdOn"].toString()) : undefined;
            this.lastUpdatedById = _data["lastUpdatedById"];
            this.lastUpdatedOn = _data["lastUpdatedOn"] ? moment.parseZone(_data["lastUpdatedOn"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'AuditMetadata' cannot be instantiated.");
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["createdById"] = this.createdById;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString(true) : undefined;
        data["lastUpdatedById"] = this.lastUpdatedById;
        data["lastUpdatedOn"] = this.lastUpdatedOn ? this.lastUpdatedOn.toISOString(true) : undefined;
        return data;
    }
}
exports.AuditMetadata = AuditMetadata;
class Person extends AuditMetadata {
    constructor(data) {
        super(data);
    }
    init(_data) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.address = _data["address"] ? Address.fromJS(_data["address"]) : undefined;
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.mobilePhoneNumber = _data["mobilePhoneNumber"];
            this.nickname = _data["nickname"];
            this.taxNumber = _data["taxNumber"];
            this.idNumber = _data["idNumber"];
            this.type = _data["type"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Person();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address"] = this.address ? this.address.toJSON() : undefined;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["mobilePhoneNumber"] = this.mobilePhoneNumber;
        data["nickname"] = this.nickname;
        data["taxNumber"] = this.taxNumber;
        data["idNumber"] = this.idNumber;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}
exports.Person = Person;
class Address extends AuditMetadata {
    constructor(data) {
        super(data);
    }
    init(_data) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.address1 = _data["address1"];
            this.address2 = _data["address2"];
            this.number = _data["number"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.postalCode = _data["postalCode"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Address();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["address1"] = this.address1;
        data["address2"] = this.address2;
        data["number"] = this.number;
        data["city"] = this.city;
        data["state"] = this.state;
        data["postalCode"] = this.postalCode;
        super.toJSON(data);
        return data;
    }
}
exports.Address = Address;
var PersonType;
(function (PersonType) {
    PersonType[PersonType["Fisical"] = 0] = "Fisical";
    PersonType[PersonType["Legal"] = 1] = "Legal";
})(PersonType = exports.PersonType || (exports.PersonType = {}));
class Unit {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.floor = _data["floor"];
            this.floorType = _data["floorType"];
            this.block = _data["block"];
            this.blockDescription = _data["blockDescription"];
            this.side = _data["side"];
            this.code = _data["code"];
            this.codePrefix = _data["codePrefix"];
            this.codeSuffix = _data["codeSuffix"];
            this.type = _data["type"] ? UnitType.fromJS(_data["type"]) : undefined;
            this.unitGroup = _data["unitGroup"] ? UnitGroup.fromJS(_data["unitGroup"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Unit();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["floor"] = this.floor;
        data["floorType"] = this.floorType;
        data["block"] = this.block;
        data["blockDescription"] = this.blockDescription;
        data["side"] = this.side;
        data["code"] = this.code;
        data["codePrefix"] = this.codePrefix;
        data["codeSuffix"] = this.codeSuffix;
        data["type"] = this.type ? this.type.toJSON() : undefined;
        data["unitGroup"] = this.unitGroup ? this.unitGroup.toJSON() : undefined;
        return data;
    }
}
exports.Unit = Unit;
var FloorType;
(function (FloorType) {
    FloorType[FloorType["Underground"] = 0] = "Underground";
    FloorType[FloorType["GroundFloor"] = 1] = "GroundFloor";
    FloorType[FloorType["Floor"] = 2] = "Floor";
    FloorType[FloorType["Roof"] = 3] = "Roof";
})(FloorType = exports.FloorType || (exports.FloorType = {}));
class UnitType {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.createdOn = _data["createdOn"] ? moment.parseZone(_data["createdOn"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UnitType();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString(true) : undefined;
        return data;
    }
}
exports.UnitType = UnitType;
class UnitGroup {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.createdOn = _data["createdOn"] ? moment.parseZone(_data["createdOn"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UnitGroup();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString(true) : undefined;
        return data;
    }
}
exports.UnitGroup = UnitGroup;
class OwnerType {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new OwnerType();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}
exports.OwnerType = OwnerType;
class PagedListResultOfOwner {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(Owner.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfOwner();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfOwner = PagedListResultOfOwner;
class Filtering {
    constructor(data) {
        this.toString = () => { return `${this.columnName}:${this.getOperatorName()}(${this.stringValue})`; };
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    getOperatorName() {
        const op = this.operator || FilterOperator.Equal;
        switch (op) {
            case FilterOperator.Equal: return "eq";
            case FilterOperator.NotEqual: return "neq";
            case FilterOperator.Contains: return "contains";
            case FilterOperator.StartsWith: return "sw";
            case FilterOperator.EndsWith: return "ew";
            case FilterOperator.GreaterThan: return "gt";
            case FilterOperator.GreaterThanOrEqual: return "gte";
            case FilterOperator.LessThan: return "lt";
            case FilterOperator.LessThanOrEqual: return "lte";
        }
    }
    init(_data) {
        if (_data) {
            this.columnName = _data["columnName"];
            this.operator = _data["operator"];
            this.stringValue = _data["stringValue"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Filtering' cannot be instantiated.");
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["columnName"] = this.columnName;
        data["operator"] = this.operator;
        data["stringValue"] = this.stringValue;
        return data;
    }
}
exports.Filtering = Filtering;
var FilterOperator;
(function (FilterOperator) {
    FilterOperator[FilterOperator["Equal"] = 0] = "Equal";
    FilterOperator[FilterOperator["NotEqual"] = 1] = "NotEqual";
    FilterOperator[FilterOperator["Contains"] = 2] = "Contains";
    FilterOperator[FilterOperator["StartsWith"] = 3] = "StartsWith";
    FilterOperator[FilterOperator["EndsWith"] = 4] = "EndsWith";
    FilterOperator[FilterOperator["GreaterThan"] = 5] = "GreaterThan";
    FilterOperator[FilterOperator["GreaterThanOrEqual"] = 6] = "GreaterThanOrEqual";
    FilterOperator[FilterOperator["LessThan"] = 7] = "LessThan";
    FilterOperator[FilterOperator["LessThanOrEqual"] = 8] = "LessThanOrEqual";
})(FilterOperator = exports.FilterOperator || (exports.FilterOperator = {}));
class Sorting {
    constructor(data) {
        this.toString = () => { return `${this.columnName}:${this.sortDirection == SortDirection.Ascending ? "asc" : "desc"}`; };
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.columnName = _data["columnName"];
            this.sortDirection = _data["sortDirection"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Sorting' cannot be instantiated.");
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["columnName"] = this.columnName;
        data["sortDirection"] = this.sortDirection;
        return data;
    }
}
exports.Sorting = Sorting;
var SortDirection;
(function (SortDirection) {
    SortDirection[SortDirection["Ascending"] = 0] = "Ascending";
    SortDirection[SortDirection["Descending"] = 1] = "Descending";
})(SortDirection = exports.SortDirection || (exports.SortDirection = {}));
class OwnerRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.personId = _data["personId"];
            this.unitId = _data["unitId"];
            this.ownerTypeId = _data["ownerTypeId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new OwnerRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["personId"] = this.personId;
        data["unitId"] = this.unitId;
        data["ownerTypeId"] = this.ownerTypeId;
        return data;
    }
}
exports.OwnerRequest = OwnerRequest;
class PagedListResultOfOwnerType {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(OwnerType.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfOwnerType();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfOwnerType = PagedListResultOfOwnerType;
class OwnerTypeRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new OwnerTypeRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}
exports.OwnerTypeRequest = OwnerTypeRequest;
class PagedListResultOfUnit {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(Unit.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfUnit();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfUnit = PagedListResultOfUnit;
class UnitRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.floor = _data["floor"];
            this.floorType = _data["floorType"];
            this.block = _data["block"];
            this.blockDescription = _data["blockDescription"];
            this.side = _data["side"];
            this.code = _data["code"];
            this.codePrefix = _data["codePrefix"];
            this.codeSuffix = _data["codeSuffix"];
            this.unitTypeId = _data["unitTypeId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UnitRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["floor"] = this.floor;
        data["floorType"] = this.floorType;
        data["block"] = this.block;
        data["blockDescription"] = this.blockDescription;
        data["side"] = this.side;
        data["code"] = this.code;
        data["codePrefix"] = this.codePrefix;
        data["codeSuffix"] = this.codeSuffix;
        data["unitTypeId"] = this.unitTypeId;
        return data;
    }
}
exports.UnitRequest = UnitRequest;
class UnitRangeRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.floor = _data["floor"];
            this.floorType = _data["floorType"];
            this.block = _data["block"];
            this.blockDescription = _data["blockDescription"];
            this.side = _data["side"];
            this.codeStart = _data["codeStart"];
            this.codeEnd = _data["codeEnd"];
            this.codePrefix = _data["codePrefix"];
            this.codeSuffix = _data["codeSuffix"];
            this.unitTypeId = _data["unitTypeId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UnitRangeRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["floor"] = this.floor;
        data["floorType"] = this.floorType;
        data["block"] = this.block;
        data["blockDescription"] = this.blockDescription;
        data["side"] = this.side;
        data["codeStart"] = this.codeStart;
        data["codeEnd"] = this.codeEnd;
        data["codePrefix"] = this.codePrefix;
        data["codeSuffix"] = this.codeSuffix;
        data["unitTypeId"] = this.unitTypeId;
        return data;
    }
}
exports.UnitRangeRequest = UnitRangeRequest;
class PagedListResultOfUnitGroup {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(UnitGroup.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfUnitGroup();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfUnitGroup = PagedListResultOfUnitGroup;
class UnitGroupRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UnitGroupRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}
exports.UnitGroupRequest = UnitGroupRequest;
class PagedListResultOfUnitType {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(UnitType.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfUnitType();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfUnitType = PagedListResultOfUnitType;
class UnitTypeRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new UnitTypeRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}
exports.UnitTypeRequest = UnitTypeRequest;
class MeetingSettings {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.creationEmailTemplate = _data["creationEmailTemplate"] ? EmailTemplate.fromJS(_data["creationEmailTemplate"]) : undefined;
            this.beforeNotificationEmailTemplate = _data["beforeNotificationEmailTemplate"] ? EmailTemplate.fromJS(_data["beforeNotificationEmailTemplate"]) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MeetingSettings();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["creationEmailTemplate"] = this.creationEmailTemplate ? this.creationEmailTemplate.toJSON() : undefined;
        data["beforeNotificationEmailTemplate"] = this.beforeNotificationEmailTemplate ? this.beforeNotificationEmailTemplate.toJSON() : undefined;
        return data;
    }
}
exports.MeetingSettings = MeetingSettings;
class EmailTemplate {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new EmailTemplate();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        return data;
    }
}
exports.EmailTemplate = EmailTemplate;
class MeetingSettingsRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.creationEmailTemplateId = _data["creationEmailTemplateId"];
            this.beforeNotificationEmailTemplateId = _data["beforeNotificationEmailTemplateId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MeetingSettingsRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["creationEmailTemplateId"] = this.creationEmailTemplateId;
        data["beforeNotificationEmailTemplateId"] = this.beforeNotificationEmailTemplateId;
        return data;
    }
}
exports.MeetingSettingsRequest = MeetingSettingsRequest;
class PagedListResultOfPerson {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(Person.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfPerson();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfPerson = PagedListResultOfPerson;
class AddressRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.address1 = _data["address1"];
            this.address2 = _data["address2"];
            this.addressNumber = _data["addressNumber"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.postalCode = _data["postalCode"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AddressRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["address1"] = this.address1;
        data["address2"] = this.address2;
        data["addressNumber"] = this.addressNumber;
        data["city"] = this.city;
        data["state"] = this.state;
        data["postalCode"] = this.postalCode;
        return data;
    }
}
exports.AddressRequest = AddressRequest;
class PersonRequest extends AddressRequest {
    constructor(data) {
        super(data);
    }
    init(_data) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.mobilePhoneNumber = _data["mobilePhoneNumber"];
            this.nickname = _data["nickname"];
            this.taxNumber = _data["taxNumber"];
            this.idNumber = _data["idNumber"];
            this.type = _data["type"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PersonRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["mobilePhoneNumber"] = this.mobilePhoneNumber;
        data["nickname"] = this.nickname;
        data["taxNumber"] = this.taxNumber;
        data["idNumber"] = this.idNumber;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}
exports.PersonRequest = PersonRequest;
class PersonUnitRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.unitId = _data["unitId"];
            this.ownerTypeId = _data["ownerTypeId"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PersonUnitRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["unitId"] = this.unitId;
        data["ownerTypeId"] = this.ownerTypeId;
        return data;
    }
}
exports.PersonUnitRequest = PersonUnitRequest;
class Document {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Document();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
exports.Document = Document;
class PagedListResultOfDocument {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(Document.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfDocument();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfDocument = PagedListResultOfDocument;
class DocumentRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
exports.DocumentRequest = DocumentRequest;
class Meeting {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.type = _data["type"] ? MeetingType.fromJS(_data["type"]) : undefined;
            this.startsOn = _data["startsOn"] ? moment.parseZone(_data["startsOn"].toString()) : undefined;
            this.endsOn = _data["endsOn"] ? moment.parseZone(_data["endsOn"].toString()) : undefined;
            this.statusCode = _data["statusCode"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new Meeting();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["type"] = this.type ? this.type.toJSON() : undefined;
        data["startsOn"] = this.startsOn ? this.startsOn.toISOString(true) : undefined;
        data["endsOn"] = this.endsOn ? this.endsOn.toISOString(true) : undefined;
        data["statusCode"] = this.statusCode;
        return data;
    }
}
exports.Meeting = Meeting;
class MeetingType extends AuditMetadata {
    constructor(data) {
        super(data);
    }
    init(_data) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MeetingType();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        super.toJSON(data);
        return data;
    }
}
exports.MeetingType = MeetingType;
var MeetingStatus;
(function (MeetingStatus) {
    MeetingStatus[MeetingStatus["Created"] = 0] = "Created";
})(MeetingStatus = exports.MeetingStatus || (exports.MeetingStatus = {}));
class PagedListResultOfMeeting {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(Meeting.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfMeeting();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfMeeting = PagedListResultOfMeeting;
class MeetingRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.meetingTypeId = _data["meetingTypeId"];
            this.startsOn = _data["startsOn"] ? moment.parseZone(_data["startsOn"].toString()) : undefined;
            this.endsOn = _data["endsOn"] ? moment.parseZone(_data["endsOn"].toString()) : undefined;
            this.statusCode = _data["statusCode"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MeetingRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["meetingTypeId"] = this.meetingTypeId;
        data["startsOn"] = this.startsOn ? this.startsOn.toISOString(true) : undefined;
        data["endsOn"] = this.endsOn ? this.endsOn.toISOString(true) : undefined;
        data["statusCode"] = this.statusCode;
        return data;
    }
}
exports.MeetingRequest = MeetingRequest;
class PagedListResultOfMeetingType {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(MeetingType.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfMeetingType();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfMeetingType = PagedListResultOfMeetingType;
class MeetingTypeRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MeetingTypeRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}
exports.MeetingTypeRequest = MeetingTypeRequest;
class MeetingUnit {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MeetingUnit();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
exports.MeetingUnit = MeetingUnit;
class PagedListResultOfMeetingUnit {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(MeetingUnit.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfMeetingUnit();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfMeetingUnit = PagedListResultOfMeetingUnit;
class MeetingUnitRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new MeetingUnitRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
exports.MeetingUnitRequest = MeetingUnitRequest;
class VotingSession {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.order = _data["order"];
            this.startsOn = _data["startsOn"] ? moment.parseZone(_data["startsOn"].toString()) : undefined;
            this.endsOn = _data["endsOn"] ? moment.parseZone(_data["endsOn"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new VotingSession();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["order"] = this.order;
        data["startsOn"] = this.startsOn ? this.startsOn.toISOString(true) : undefined;
        data["endsOn"] = this.endsOn ? this.endsOn.toISOString(true) : undefined;
        return data;
    }
}
exports.VotingSession = VotingSession;
class PagedListResultOfVotingSession {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(VotingSession.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfVotingSession();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfVotingSession = PagedListResultOfVotingSession;
class VotingSessionRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.startsOn = _data["startsOn"] ? moment.parseZone(_data["startsOn"].toString()) : undefined;
            this.endsOn = _data["endsOn"] ? moment.parseZone(_data["endsOn"].toString()) : undefined;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new VotingSessionRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["startsOn"] = this.startsOn ? this.startsOn.toISOString(true) : undefined;
        data["endsOn"] = this.endsOn ? this.endsOn.toISOString(true) : undefined;
        return data;
    }
}
exports.VotingSessionRequest = VotingSessionRequest;
class VotingTopic {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new VotingTopic();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
exports.VotingTopic = VotingTopic;
class PagedListResultOfVotingTopic {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(VotingTopic.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfVotingTopic();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfVotingTopic = PagedListResultOfVotingTopic;
class VotingTopicRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new VotingTopicRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
exports.VotingTopicRequest = VotingTopicRequest;
class VotingTopicOption {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new VotingTopicOption();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
exports.VotingTopicOption = VotingTopicOption;
class PagedListResultOfVotingTopicOption {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(VotingTopicOption.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfVotingTopicOption();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfVotingTopicOption = PagedListResultOfVotingTopicOption;
class VotingTopicOptionRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new VotingTopicOptionRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}
exports.VotingTopicOptionRequest = VotingTopicOptionRequest;
class PagedListResultOfEmailTemplate {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(EmailTemplate.fromJS(item));
            }
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PagedListResultOfEmailTemplate();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        return data;
    }
}
exports.PagedListResultOfEmailTemplate = PagedListResultOfEmailTemplate;
class EmailTemplateRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new EmailTemplateRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        return data;
    }
}
exports.EmailTemplateRequest = EmailTemplateRequest;
class ApiException extends Error {
    constructor(message, status, response, headers, result) {
        super();
        this.isApiException = true;
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
exports.ApiException = ApiException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}
function isAxiosError(obj) {
    return obj && obj.isAxiosError === true;
}
