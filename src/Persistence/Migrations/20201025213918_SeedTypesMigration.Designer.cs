// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoCond.Persistence;

namespace NoCond.Persistence.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20201025213918_SeedTypesMigration")]
    partial class SeedTypesMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NoCond.Application.Email.Data.EmailTemplateData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmailTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.AddressData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddressData");
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.DocumentData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .HasColumnName("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.MeetingData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndsOn")
                        .HasColumnName("EndsOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MeetingTypeId")
                        .HasColumnName("MeetingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartsOn")
                        .HasColumnName("StartsOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusCode")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("MeetingTypeId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.MeetingDocumentData", b =>
                {
                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MeetingId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("MeetingDocuments");
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.MeetingTypeData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MeetingTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("MeetingTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ecf6c4f9-f7c4-4b4c-97d6-d52a7eb3e9a5"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Assembleia Geral Extraordinária",
                            Name = "AGE"
                        },
                        new
                        {
                            Id = new Guid("4514a178-a1a3-4686-a338-8735303c6693"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Assembleia Geral de Instalação",
                            Name = "AGI"
                        },
                        new
                        {
                            Id = new Guid("d09c8374-1735-4761-af71-25c8b976729f"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Assembleia Geral Ordinária",
                            Name = "AGO"
                        });
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.MeetingUnitData", b =>
                {
                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MeetingId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("MeetingUnits");
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.PersonData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("IdNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnName("MobilePhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<Guid>("OwnerId")
                        .HasColumnName("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("IdNumber")
                        .IsUnique();

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.HasIndex("TaxNumber")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.VotingSessionData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VotingSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EndedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndsOn")
                        .HasColumnName("EndsOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MeetingId")
                        .HasColumnName("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartsOn")
                        .HasColumnName("StartsOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusCode")
                        .HasColumnName("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("VotingSessions");
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.VotingTopicData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VotingTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnswerLimit")
                        .HasColumnName("AnswerLimit")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnName("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Introdution")
                        .HasColumnName("Introdution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnName("Order")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnName("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VotingSessionId")
                        .HasColumnName("VotingSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VotingSessionId");

                    b.ToTable("VotingTopics");
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.VotingTopicOptionData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VotingTopicOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Editable")
                        .HasColumnName("Editable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFillableOption")
                        .HasColumnName("IsFillableOption")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnName("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TypeCode")
                        .HasColumnName("TypeCode")
                        .HasColumnType("int");

                    b.Property<Guid>("VotingTopicId")
                        .HasColumnName("VotingTopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VotingTopicId");

                    b.ToTable("VotingTopicOptions");
                });

            modelBuilder.Entity("NoCond.Application.Settings.Data.MeetingSettingsData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MeetingSettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BeforeNotificationEmailTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreationEmailTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EndedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BeforeNotificationEmailTemplateId");

                    b.HasIndex("CreationEmailTemplateId");

                    b.ToTable("MeetingSettings");
                });

            modelBuilder.Entity("NoCond.Application.Unit.Data.OwnerData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EndedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerTypeId")
                        .HasColumnName("OwnerTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnName("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnitId")
                        .HasColumnName("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerTypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("NoCond.Application.Unit.Data.OwnerTypeData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OwnerTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("OwnerTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94068131-d678-44cc-a89c-5223e19c6b23"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pessoa Física"
                        },
                        new
                        {
                            Id = new Guid("2d2e067c-2fbf-4700-8216-7b07df29f418"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pessoa Jurídica"
                        },
                        new
                        {
                            Id = new Guid("5a6af403-e037-42b8-bf1d-94b77b385a94"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Responsável com Procuração"
                        });
                });

            modelBuilder.Entity("NoCond.Application.Unit.Data.UnitData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Block")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("BlockDescription")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CodePrefix")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CodeSuffix")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("FloorType")
                        .HasColumnType("int");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Side")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<Guid>("UnitTypeId")
                        .HasColumnName("UnitTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("NoCond.Application.Unit.Data.UnitTypeData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UnitTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastUpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("UnitTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f30816f-0858-4f8e-9e8c-23f96e7bf841"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sala"
                        },
                        new
                        {
                            Id = new Guid("d2d198f8-c29e-45dd-ac55-468dad85237e"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Loja"
                        },
                        new
                        {
                            Id = new Guid("69f09bcc-9bb8-4d12-b14f-520e654afc1c"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Edícula"
                        },
                        new
                        {
                            Id = new Guid("877fa233-eda2-4ed6-83cd-541cfd103977"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Box"
                        },
                        new
                        {
                            Id = new Guid("eaa67684-5e44-47df-a8cc-8ecf5ae34418"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kiosque"
                        },
                        new
                        {
                            Id = new Guid("5194a3e6-b86f-46ef-a645-2ac3238bec26"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apartamento"
                        },
                        new
                        {
                            Id = new Guid("b9d567bd-cb55-4e40-89bf-c4032a7a1719"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cobertura"
                        },
                        new
                        {
                            Id = new Guid("73df42bf-6781-49a6-948c-4160198a7303"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Casa"
                        },
                        new
                        {
                            Id = new Guid("1a1eca3d-c606-488b-82d3-af63653c1124"),
                            CreatedOn = new DateTime(2020, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lote"
                        });
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.MeetingData", b =>
                {
                    b.HasOne("NoCond.Application.Meeting.Data.MeetingTypeData", "Type")
                        .WithMany("Meetings")
                        .HasForeignKey("MeetingTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.MeetingDocumentData", b =>
                {
                    b.HasOne("NoCond.Application.Meeting.Data.DocumentData", "Document")
                        .WithMany("WithMeetings")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoCond.Application.Meeting.Data.MeetingData", "Meeting")
                        .WithMany("WithDocuments")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.MeetingUnitData", b =>
                {
                    b.HasOne("NoCond.Application.Meeting.Data.MeetingData", "Meeting")
                        .WithMany("WithUnits")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoCond.Application.Unit.Data.UnitData", "Unit")
                        .WithMany("WithMeetings")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.PersonData", b =>
                {
                    b.HasOne("NoCond.Application.Meeting.Data.AddressData", "Address")
                        .WithOne("Person")
                        .HasForeignKey("NoCond.Application.Meeting.Data.PersonData", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NoCond.Application.Unit.Data.OwnerData", "Owner")
                        .WithOne("Person")
                        .HasForeignKey("NoCond.Application.Meeting.Data.PersonData", "OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.VotingSessionData", b =>
                {
                    b.HasOne("NoCond.Application.Meeting.Data.MeetingData", "Meeting")
                        .WithMany("VotingSessions")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.VotingTopicData", b =>
                {
                    b.HasOne("NoCond.Application.Meeting.Data.VotingSessionData", "VotingSession")
                        .WithMany("VotingTopics")
                        .HasForeignKey("VotingSessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NoCond.Application.Meeting.Data.VotingTopicOptionData", b =>
                {
                    b.HasOne("NoCond.Application.Meeting.Data.PersonData", "Person")
                        .WithMany("VotingTopicOptions")
                        .HasForeignKey("VotingTopicId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("NoCond.Application.Meeting.Data.VotingTopicData", "VotingTopic")
                        .WithMany("VotingTopicOptions")
                        .HasForeignKey("VotingTopicId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NoCond.Application.Settings.Data.MeetingSettingsData", b =>
                {
                    b.HasOne("NoCond.Application.Email.Data.EmailTemplateData", "BeforeNotificationEmailTemplate")
                        .WithMany()
                        .HasForeignKey("BeforeNotificationEmailTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NoCond.Application.Email.Data.EmailTemplateData", "CreationEmailTemplate")
                        .WithMany()
                        .HasForeignKey("CreationEmailTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NoCond.Application.Unit.Data.OwnerData", b =>
                {
                    b.HasOne("NoCond.Application.Unit.Data.OwnerTypeData", "Type")
                        .WithMany("Owners")
                        .HasForeignKey("OwnerTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NoCond.Application.Unit.Data.UnitData", "Unit")
                        .WithMany("Owners")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NoCond.Application.Unit.Data.UnitData", b =>
                {
                    b.HasOne("NoCond.Application.Unit.Data.UnitTypeData", "Type")
                        .WithMany("Units")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
